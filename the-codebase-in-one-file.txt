
//filepath: src\main.cpp
#include <Arduino.h>
#include "./user.hpp"
#include "./send-byte.hpp"
#include "./read-byte.hpp"
#include "./wait-for-header.hpp"

#define DATA_PIN 25
#define DEFAULT_SEND_FREQUENCY 700 // Increased delay for better timing

void setup()
{
    Serial.begin(115200);
    Serial.println(IS_SENDING ? "SENDER" : "RECIEVER");

    pinMode(DATA_PIN, IS_SENDING ? OUTPUT : INPUT);
    if (IS_SENDING)
        digitalWrite(DATA_PIN, LOW); // Set initial state
}

void loop()
{
#if IS_SENDING
    sendByte(0b11110000, DATA_PIN, DEFAULT_SEND_FREQUENCY);
    sendByte(0b11110000, DATA_PIN, DEFAULT_SEND_FREQUENCY);
    sendByte(123, DATA_PIN, DEFAULT_SEND_FREQUENCY);
    Serial.println("SENDED: 123");
#else
    waitForHeader(0b1111000011110000, DATA_PIN, DEFAULT_SEND_FREQUENCY);
    uint8_t received = readByte(DATA_PIN, DEFAULT_SEND_FREQUENCY);
    Serial.println(String("RECIVED: ") + String(received)); // Proper string concatenation
#endif
}

//filepath: src\read-byte.hpp
#pragma once
#include <Arduino.h>

uint8_t readByte(int pin, int delayTime)
{
    uint8_t out = 0;

    // Record the start time once at the beginning
    unsigned long startTime = micros();

    // Read each bit, starting with the MSB
    for (uint8_t i = 0; i < 8; i++)
    {
        // Read the pin and set the corresponding bit
        out |= (digitalRead(pin) == HIGH) << i;

        // Calculate the target time for this bit
        unsigned long targetTime = startTime + (i * delayTime);

        // Wait until it's time to read the current bit
        while (micros() < targetTime)
        {
        }
    }

    return out;
}

//filepath: src\send-byte.hpp
#pragma once
#include <Arduino.h>

void sendByte(uint8_t value, int pin, int delayTime)
{
    // Record the start time once at the beginning
    unsigned long startTime = micros();

    // Send each bit, starting with the MSB
    for (uint8_t i = 0; i < 8; i++)
    {
        // Extract the bit at position `i`
        bool bit = (value & (1 << i)) != 0;

        // Write HIGH or LOW to the pin
        digitalWrite(pin, bit ? HIGH : LOW);

        // Calculate the target time for this bit
        unsigned long targetTime = startTime + (i * delayTime);

        // Wait until it's time to send the current bit
        while (micros() < targetTime)
        {
        }
    }
}


//filepath: src\user.hpp
#pragma once
// Don't edit this file
#define IS_SENDING false


//filepath: src\wait-for-header.hpp
#pragma once
#include <Arduino.h>

// Waits for a specific 16-bit header sequence on the specified pin
void waitForHeader(uint16_t header, int pin, int delayTime)
{
    uint16_t headerReceived = 0;

    // Record the start time once at the beginning
    unsigned long startTime = micros();

    int receivedIndex = 0;
    // Pre-fill headerReceived by reading the first 15 bits
    for (; receivedIndex < 15; receivedIndex++)
    {
        // Shift left and read the next bit
        headerReceived = (headerReceived << 1) | (digitalRead(pin) == HIGH);

        // Calculate the target time for this bit
        unsigned long targetTime = startTime + (receivedIndex * delayTime);

        // Wait until it's time to read the current bit
        while (micros() < targetTime)
        {
        }
    }

    // Continuously read bits until the header is matched
    while (true)
    {
        receivedIndex++;
        // Shift left and add the next bit
        headerReceived = (headerReceived << 1) | (digitalRead(pin) == HIGH);

        // Calculate the target time for this bit
        unsigned long targetTime = startTime + (receivedIndex * delayTime);

        // Wait until it's time to read the current bit
        while (micros() < targetTime)
        {
        }

        // Check if the header matches
        if (headerReceived == header)
        {
            return; // Header detected
        }
    }
}

